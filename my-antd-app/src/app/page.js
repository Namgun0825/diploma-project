'use client';
import React, { useState, useEffect } from 'react';
import { Progress, Button, Card, List } from 'antd';
import questions from '@/data/question';

export default function HomePage() {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [answers, setAnswers] = useState(Array(questions.length).fill(null));
  const [submitted, setSubmitted] = useState(false);
  const [today, setToday] = useState('');

  useEffect(() => {
    const date = new Date();
    setToday(
      `${date.getFullYear()}.${String(date.getMonth() + 1).padStart(2, '0')}.${String(
        date.getDate()
      ).padStart(2, '0')}`
    );
  }, []);

  const saveAnswer = (value) => {
    const updated = [...answers];
    updated[currentIndex] = value;
    setAnswers(updated);
    if (currentIndex < questions.length - 1) {
      setCurrentIndex(currentIndex + 1);
    }
  };

  const goBack = () => currentIndex > 0 && setCurrentIndex(currentIndex - 1);
  const handleSubmit = () => {
    if (answers.includes(null)) {
      alert('–ë“Ø—Ö –∞—Å—É—É–ª—Ç–∞–¥ —Ö–∞—Ä–∏—É–ª–Ω–∞ —É—É!');
      return;
    }
    setSubmitted(true);
  };
  const resetTest = () => {
    setAnswers(Array(questions.length).fill(null));
    setCurrentIndex(0);
    setSubmitted(false);
  };

  const totalScore = answers.reduce((sum, v) => sum + (v !== null ? v : 0), 0);
  const progressPercent = Math.round(
    (answers.filter((a) => a !== null).length / questions.length) * 100
  );

  const getResultLevel = (score) => {
    if (score <= 15)
      return {
        title: 'üåø –•”©–Ω–≥”©–Ω —Å—Ç—Ä–µ—Å—Å',
        advice:
          '–¢–∞ –æ–¥–æ–æ–≥–æ–æ—Ä —Å—ç—Ç–≥—ç–ª –∑“Ø–π–Ω —Ö—É–≤—å–¥ —Ç–∞–π–≤–∞–Ω, —Å”©—Ä”©–≥ –Ω”©–ª”©”©–ª”©–ª –±–∞–≥–∞—Ç–∞–π –±–∞–π–Ω–∞. –ó–∞—Ä–∏–º –±–∞–≥–∞ –∑—ç—Ä–≥–∏–π–Ω —è–¥–∞—Ä–≥–∞–∞, —Å—ç—Ç–≥—ç–ª —Å–∞–Ω–∞–∞–Ω—ã —Ö—ç–ª–±—ç–ª–∑—ç–ª –±–∞–π–∂ –±–æ–ª–æ—Ö —á —ç–Ω—ç –Ω—å —ç–Ω–≥–∏–π–Ω —Ö“Ø—Ä—ç—ç–Ω–¥ –±–∞–π–Ω–∞. –ê–º—å–¥—Ä–∞–ª—ã–Ω —Ö—ç–≤ –º–∞—è–≥–∞–∞ —Ö–∞–¥–≥–∞–ª–∞—Ö, —ç—Ä“Ø“Ø–ª –¥–∞–¥–ª–∞–∞ “Ø—Ä–≥—ç–ª–∂–ª“Ø“Ø–ª—ç—ç—Ä—ç–π. –•—É–≤–∏–π–Ω –∞–º—Ä–∞–ª—Ç, –∞–º–∂–∏–ª—Ç–∞–∞ —Ç—ç–º–¥—ç–≥–ª—ç—Ö, –∞–º—å–¥—Ä–∞–ª—ã–Ω –∑–æ—Ä–∏–ª–≥–æ–æ –±–∞—Ç–∞—Ç–≥–∞—Ö –Ω—å “Ø—Ä –¥“Ø–Ω—Ç—ç–π.'
      };
    if (score <= 25)
      return {
        title: '‚ö†Ô∏è –ò–ª—ç—Ä—Ö–∏–π —Å—Ç—Ä–µ—Å—Å',
        advice:
          '–°—ç—Ç–≥—ç–ª –∑“Ø–π–Ω –±–æ–ª–æ–Ω –±–∏–µ –º–∞—Ö–±–æ–¥—ã–Ω –∞—á–∞–∞–ª–∞–ª –º—ç–¥—ç–≥–¥—ç—Ö“Ø–π—Ü –Ω—ç–º—ç–≥–¥—Å—ç–Ω. –ì—ç—Å—ç–Ω —á —ç–Ω—ç –Ω—å —Ö—ç—Ç –∞—é—É–ª—Ç–∞–π —Ç“Ø–≤—à–∏–Ω–¥ —Ö“Ø—Ä—ç—ç–≥“Ø–π. –î–∞—Å–≥–∞–ª —Ö”©–¥”©–ª–≥”©”©–Ω, –∞–º—Ä–∞–ª—Ç, –∞–º—å—Å–≥–∞–ª—ã–Ω –¥–∞—Å–≥–∞–ª, —Ö–∞—Ä–∏–ª—Ü–∞–∞–≥–∞–∞ —Å—ç—Ä–≥—ç—ç—Ö –∞–ª—Ö–∞–º —Ö—ç—Ä—ç–≥—Ç—ç–π. –Ø–¥–∞—Ä–≥–∞–∞ —Ö—ç—Ç—Ä—ç—Ö—ç—ç—Å —Å—ç—Ä–≥–∏–π–ª–∂ –¥–æ–ª–æ–æ —Ö–æ–Ω–æ–≥—Ç –¥–æ—Ä —Ö–∞—è–∂ –Ω—ç–≥ –±“Ø—Ç—ç–Ω ”©–¥—Ä–∏–π–≥ ”©”©—Ä—Ç”©”© –∑–æ—Ä–∏—É–ª–∞—Ö —Ö—ç—Ä—ç–≥—Ç—ç–π.'
      };
    if (score <= 35)
      return {
        title: 'üî• –¢—É–π–ª–¥–∞–∂ –±—É–π —Ç”©–ª”©–≤',
        advice:
          '–Ø–¥–∞—Ä–≥–∞–∞, —Å–æ–Ω–∏—Ä—Ö–ª—ã–Ω –±—É—É—Ä–∞–ª—Ç, —Å—ç—Ç–≥—ç–ª —Ö”©–¥–ª”©–ª–∏–π–Ω —Ö—ç–ª–±—ç–ª–∑—ç–ª –Ω—å –∞–∂–ª—ã–Ω –±“Ø—Ç—ç—ç–º–∂, —Ö—É–≤–∏–π–Ω —Ö–∞—Ä–∏–ª—Ü–∞–∞–Ω–¥ –º—ç–¥—ç–≥–¥—ç—Ö“Ø–π—Ü –Ω”©–ª”©”©–ª–∂ —ç—Ö—ç–ª—Å—ç–Ω –±–∞–π–Ω–∞. –ê–º—å–¥—Ä–∞–ª—ã–Ω —Ö—ç–º–Ω—ç–ª–∏–π–≥ —ç—Ä–≥—ç–Ω —Ö–∞—Ä, –∞—á–∞–∞–ª–ª–∞–∞ —Ö”©–Ω–≥”©–ª, —ç—Ä“Ø“Ø–ª –º—ç–Ω–¥–∏–π–Ω “Ø–∑–ª—ç–≥—Ç —Ö–∞–º—Ä–∞–≥–¥–∞–∂, —Å—ç—Ç–≥—ç–ª –∑“Ø–π–Ω –∑”©–≤–ª”©–≥”©”© –∞–≤–∞—Ö–∞–∞—Ä –±–æ–¥–æ–∂ —ç—Ö–ª—ç—Ö —Ö—ç—Ä—ç–≥—Ç—ç–π. –ì–∞–Ω—Ü–∞–∞—Ä–∞–∞ –±–∞–π—Ö–∞–∞—Å –∏–ª“Ø“Ø –¥–æ—Ç–Ω—ã —Ö“Ø–º“Ø“Ø—Å—Ç—ç–π–≥—ç—ç –∏–ª“Ø“Ø —Ö–æ–ª–±–æ–æ—Ç–æ–π –±–∞–π.'
      };
    return {
      title: 'üö® –¢—É–π–ª–¥—Å–∞–Ω',
      advice:
        '–ú—ç—Ä–≥—ç–∂–ª–∏–π–Ω —Å—ç—Ç–≥—ç–ª –∑“Ø–π—á —ç—Å–≤—ç–ª —Å—ç—Ç–≥—ç—Ü–∏–π–Ω —ç–º—á–∏–¥ —Ö–∞–Ω–¥–∞—Ö—ã–≥ –∑”©–≤–ª”©–∂ –±–∞–π–Ω–∞. –ê—á–∞–∞–ª–ª–∞–∞—Å–∞–∞ —Ç“Ø—Ä —Ö–æ–ª–¥–æ–∂, –æ—Ä—á–∏–Ω–¥–æ–æ ”©”©—Ä—á–ª”©–ª—Ç –æ—Ä—É—É–ª, —Ç–∞–π–≤—à—Ä–∞—Ö –∞—Ä–≥—É—É–¥ (10 —É–¥–∞–∞ –≥“Ø–Ω–∑–≥–∏–π –∞–º—å—Å–≥–∞–ª, –±–∞–π–≥–∞–ª—å –∞–ª—Ö–∞—Ö, –¥—É—Ä—Ç–∞–π —Ö”©–≥–∂–∏–º”©”© —Å–æ–Ω—Å–æ—Ö) –∑—ç—Ä–≥–∏–π–≥ —à—É—É–¥ —Ö—ç—Ä—ç–≥–∂“Ø“Ø–ª—ç—Ö –±–æ–ª–æ–º–∂—Ç–æ–π.'
    };
  };

  return (
    <div style={{ width: '100%', maxWidth: 700, margin: '0 auto', padding: 12 }}>
      <HeaderSection today={today} />

      {submitted ? (
        <ResultScreen
          total={totalScore}
          result={getResultLevel(totalScore)}
          answers={answers}
          onRestart={resetTest}
        />
      ) : (
        <>
          <Progress percent={progressPercent} status="active" />
          <QuestionScreen
            question={questions[currentIndex]}
            selected={answers[currentIndex]}
            onAnswer={saveAnswer}
          />

          <div style={{ marginTop: 12, display: 'flex', justifyContent: 'space-between' }}>
            <Button onClick={goBack} disabled={currentIndex === 0}>
              ”®–º–Ω”©—Ö
            </Button>
            {currentIndex === questions.length - 1 && (
              <Button type="primary" onClick={handleSubmit}>
                –ò–ª–≥—ç—ç—Ö
              </Button>
            )}
          </div>

          <p style={{ marginTop: 8, textAlign: 'center' }}>
            –ê—Å—É—É–ª—Ç {currentIndex + 1} / {questions.length}
          </p>
        </>
      )}
    </div>
  );
}

function HeaderSection({ today }) {
  return (
    <div
      style={{
        display: 'grid',
        gridTemplateColumns: 'max-content auto',
        rowGap: 6,
        columnGap: 12,
        marginBottom: 32,
        fontSize: 16,
        lineHeight: 1.5,
      }}
    >
      <div><strong>–¢”©—Å”©–ª:</strong></div>
      <div>–°—Ç—Ä–µ—Å—Å —Ö–∞–ª—à—Ä–∞—Ö —Ö–∞–º —à–∏–Ω–∂–∏–π–Ω “Ø–Ω—ç–ª–≥—ç—ç–≥ –±–æ–ª–æ–≤—Å—Ä–æ–Ω–≥—É–π –±–æ–ª–≥–æ—Ö –Ω—å</div>
      <div><strong>–û—é—É—Ç–Ω—ã –∫–æ–¥:</strong></div>
      <div>B210480007</div>
      <div><strong>–û—é—É—Ç–∞–Ω –Ω—ç—Ä:</strong></div>
      <div>–ë.–≠—Ä–¥—ç–Ω—ç—Å–∞–π—Ö–∞–Ω</div>
      <div><strong>–û–≥–Ω–æ–æ:</strong></div>
      <div>{today}</div>
      <div><strong>–£–¥–∏—Ä–¥–∞–≥—á –±–∞–≥—à:</strong></div>
      <div>–î.–¶–æ–≥–∑–æ–ª–º–∞–∞ (–î–æ–∫—Ç–æ—Ä/Ph.D, –î—ç–¥ –ø—Ä–æ–ø)</div>
      <div><strong>–ó”©–≤–ª”©—Ö –±–∞–≥—à:</strong></div>
      <div>–õ.–ê–∑–∑–∞—è–∞ (–ú–∞–≥–∏—Å—Ç—Ä)</div>
    </div>
  );
}

function QuestionScreen({ question, selected, onAnswer }) {
  return (
    <Card
      style={{ marginTop: 12, width: '100%', overflow: 'visible', borderRadius: 8 }}
      bodyStyle={{ padding: 16 }}
    >
      {/* Question Text */}
      <div
        style={{
          whiteSpace: 'normal',
          overflow: 'visible',
          wordBreak: 'break-word',
          fontSize: '1.1rem',
          lineHeight: 1.4,
        }}
      >
        {question.text}
      </div>

      {/* Answer Options */}
      <div style={{ marginTop: 12, display: 'flex', flexDirection: 'column', gap: 8 }}>
        {question.options.map((opt, idx) => (
          <Button
            key={idx}
            type={selected === idx ? 'primary' : 'default'}
            block
            onClick={() => onAnswer(idx)}
            style={{
              whiteSpace: 'normal',
              overflow: 'visible',
              textOverflow: 'clip',
              wordBreak: 'break-word',
              textAlign: 'left',
              padding: '12px 14px',
              fontSize: '1rem',
              lineHeight: 1.5,
              height: 'auto',
              borderRadius: 6,
            }}
          >
            {idx} –æ–Ω–æ–æ ‚Äì {opt}
          </Button>
        ))}
      </div>
    </Card>
  );
}

function ResultScreen({ total, result, answers, onRestart }) {
  return (
    <Card title="–¢–∞–Ω—ã “Æ—Ä –î“Ø–Ω" style={{ marginTop: 12, borderRadius: 8 }}>
      <h2>–ù–∏–π—Ç –æ–Ω–æ–æ: {total}</h2>
      <h3>{result.title}</h3>
      <p>{result.advice}</p>
      <List
        header={<strong>–ó”©–≤–ª”©–º–∂“Ø“Ø–¥</strong>}
        dataSource={answers.map((ans, idx) => questions[idx].advices[ans])}
        renderItem={(item) => (
          <List.Item style={{ whiteSpace: 'normal', wordBreak: 'break-word' }}> 
            <div>{item}</div>
          </List.Item>
        )}
        style={{ marginTop: 12 }}
      />
      <Button type="primary" onClick={onRestart} style={{ marginTop: 16 }}>
        –î–∞—Ö–∏–Ω —ç—Ö–ª“Ø“Ø–ª—ç—Ö
      </Button>
    </Card>
  );
}
